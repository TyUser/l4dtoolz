name: build

on:
  push:
    branches:
      - main
      - master
    tags:
      - '*'
    paths-ignore:
      - LICENSE
      - README.md
  pull_request:
    branches:
      - main
      - master
    paths-ignore:
      - LICENSE
      - README.md
  schedule:
    - cron: '30 03 01 */3 *' # Artifacts expire every 3 months

jobs:
  build:
    name: build with mms${{ matrix.mm_version }} on ${{ matrix.os_short }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - windows-latest

        mm_version:
          - "master"

        include:
          - mm_version: "master"
            mm_branch: "master"

          - os: ubuntu-latest
            os_short: linux

          - os: windows-latest
            os_short: win

    steps:
      - name: Prepare env
        shell: bash
        run: |
          echo "GITHUB_SHA_SHORT=${GITHUB_SHA::7}" >> $GITHUB_ENV

      - name: Install (Linux)
        if: startsWith(runner.os, 'Linux')
        run: |
          sudo dpkg --add-architecture i386
          sudo apt-get update
          sudo apt-get install -y clang g++-multilib
          echo "CC=clang" >> $GITHUB_ENV
          echo "CXX=clang++" >> $GITHUB_ENV

      - name: Checking out MM:Source
        uses: actions/checkout@v4
        with:
          repository: alliedmodders/metamod-source
          ref: ${{ matrix.mm_branch }}
          path: metamod-${{ matrix.mm_version }}

      - name: Setting up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Setting up ambuild
        run: |
          python -m pip install wheel
          pip install git+https://github.com/accelerator74/ambuild@nog3

      - name: Checking out hl2sdk-l4d
        uses: actions/checkout@v4
        with:
          repository: alliedmodders/hl2sdk
          ref: l4d
          path: hl2sdk-l4d

      - name: Checking out hl2sdk-l4d2
        uses: actions/checkout@v4
        with:
          repository: alliedmodders/hl2sdk
          ref: l4d2
          path: hl2sdk-l4d2

      - name: Checking out own repository
        uses: actions/checkout@v4
        with:
          path: src

      - name: Compiling ${{ github.event.repository.name }}-l4d files
        shell: bash
        working-directory: src
        run: |
          mkdir build_l4d
          cd build_l4d
          python ../configure.py --enable-optimize --sdks="l4d" --mms-path="${{ github.workspace }}/metamod-${{ matrix.mm_version }}"
          ambuild

      - name: Compiling ${{ github.event.repository.name }}-l4d2 files
        shell: bash
        working-directory: src
        run: |
          mkdir build_l4d2
          cd build_l4d2
          python ../configure.py --enable-optimize --sdks="l4d2" --mms-path="${{ github.workspace }}/metamod-${{ matrix.mm_version }}"
          ambuild

      - name: Uploading l4d package
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.event.repository.name }}-l4d-${{ matrix.os_short }}-${{ env.GITHUB_SHA_SHORT }}
          path: src/build_l4d/package

      - name: Uploading l4d2 package
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.event.repository.name }}-l4d2-${{ matrix.os_short }}-${{ env.GITHUB_SHA_SHORT }}
          path: src/build_l4d2/package

  release:
    name: Release
    if: startsWith(github.ref, 'refs/tags/')
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4

      - name: Package
        run: |
          version=`echo $GITHUB_REF | sed "s/refs\/tags\///"`
          ls -Rall
          for folder in ${{ github.event.repository.name }}*; do
            if [ -d "$folder" ]; then
              echo "Processing folder: $folder"
              cd $folder
              tar -czf ../$folder.tar.gz -T <(\ls -1)
              cd ..
            fi
          done

      - name: Release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: '*.tar.gz'
          tag: ${{ github.ref }}
          file_glob: true
